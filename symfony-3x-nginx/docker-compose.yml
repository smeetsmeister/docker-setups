version: "3.1"
services:
  db:
    image: mysql:5.6
    container_name: msyql
    working_dir: /application
    volumes:
      - ../docker/mysql:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=default
      - MYSQL_USER=default
      - MYSQL_PASSWORD=default
    ports:
      - "8084:3306"

  composer:
    image: composer:latest
    container_name: composer
    working_dir: /application

  webserver:
    image: nginx:alpine
    container_name: webserver
    working_dir: /application
    volumes:
      - ../:/application
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - nginx-log-volume:/var/log/nginx
    ports:
      - "8080:80"
    links:
      - php-fpm

  php-fpm:
    build:
      context: .
      args:
        GROUPID: $group
        USERID: $user
      dockerfile: php-fpm/Dockerfile
    env_file: .env
    container_name: php-fpm
    working_dir: /application
    volumes:
      - ../:/application
      - ./php-fpm/php-ini-overrides.ini:/etc/php/7.1/fpm/conf.d/99-overrides.ini
      - ./php-fpm/php-ini-overrides.ini:/etc/php/7.1/cli/conf.d/99-overrides.ini
      - ./php-fpm/php-ini-overrides.ini:/etc/php/7.1/phpdbg/conf.d/99-overrides.ini
      # If you use AWS with credentialfiles, this will map your host aws file to docker so it can be used inside your container
      - ~/.aws:/run/.aws
    links:
      - db
      - composer

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    ports:
      - "8081:80"
    links:
      - db

      #optional if you want to use blackfire.
  blackfire:
    image: blackfire/blackfire
    container_name: blackfire
    environment:
      - BLACKFIRE_SERVER_ID=${BLACKFIRE_SERVER_ID}
      - BLACKFIRE_SERVER_TOKEN=${BLACKFIRE_SERVER_TOKEN}

volumes:
  nginx-log-volume:
    external: false

